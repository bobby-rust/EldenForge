import Button from "@mui/material/Button";
import StartingClass from "../components/StartingClass";
import Weapons from "../components/Weapons";
import Armors from "../components/Armors";
import Shield from "../components/Shield";
import Talismans from "../components/Talismans";
import Incantations from "../components/Incantations";
import Sorceries from "../components/Sorceries";
import Ashes from "../components/Ashes";
import Spirits from "../components/Spirits";
import "../styles/smallLayout.css";
import "../styles/chatGPTStyles.css";
import SelectMenu from "../components/SelectMenu";
import { Box, Grid, TextField, Typography } from "@mui/material";
import OutlinedInput from "@mui/material/OutlinedInput";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import ListItemText from "@mui/material/ListItemText";
import Select, { SelectChangeEvent } from "@mui/material/Select";
import Checkbox from "@mui/material/Checkbox";
import React from "react";
import { generateRandomBuild, getNewItem } from "../functions/generateRandomBuild";

function SmallLayout(props: any) {
    // TODO: "Roll another" button in place of every empty item spot.
    // Should be connected to the select menu.

    // TODO: Different categories for different build types
    // Magic vs Melee
    // basically move everything into two different pages and probably make the rows horizontal instead of vertical
    /**
     * This object sets the number of each item to generate by default
     * To change the number of each item generated by default, simply change the values in this object
     */
    // const initialprops.buildNums = {
    //     weapons: 2,
    //     ashes: 2,
    //     incants: 2,
    //     sorcs: 2,
    //     spirits: 2,
    //     talis: 2,
    //     shields: 1,
    // };

    // Reroll item reducer
    const buildReducer = (state: any, action: any) => {
        /**
         * Reducer for the build state
         * This function gets called every time the user generates a build or an individual item
         * When an item is rerolled, a new build is created with all old values
         * the new value is searched for using the action.id parameter, and
         * the get item function for that item type is called
         * @param state: the build's state object
         * @param action.id: the id of the item to reroll or null if a full build is to be generated
         * @param action.type: the category of item to generate if its a single item or "FULLBUILD" if a full build is to be generated
         * @return a new state object
         */

        const { id, type } = action;

        switch (type) {
            case "FULLBUILD":
                const newBuild = generateRandomBuild(
                    props.buildNums.weapons,
                    props.buildNums.ashes,
                    props.buildNums.incants,
                    props.buildNums.sorcs,
                    props.buildNums.spirits,
                    props.buildNums.talis,
                    props.buildNums.shields,
                    props.includePreviouslyRolled
                );

                return newBuild;
            case "ARMOR.HELM":
                const newStateHelm = getNewItem(
                    id,
                    state,
                    "ARMOR.HELM",
                    props.includePreviouslyRolled.armors
                );
                return newStateHelm;
            case "ARMOR.CHEST":
                const newStateChest = getNewItem(
                    id,
                    state,
                    "ARMOR.CHEST",
                    props.includePreviouslyRolled.armors
                );
                return newStateChest;
            case "ARMOR.GAUNTLETS":
                const newStateGaunt = getNewItem(
                    id,
                    state,
                    "ARMOR.GAUNTLETS",
                    props.includePreviouslyRolled.armors
                );
                return newStateGaunt;
            case "ARMOR.LEG":
                const newStateLegs = getNewItem(
                    id,
                    state,
                    "ARMOR.LEG",
                    props.includePreviouslyRolled.armors
                );
                return newStateLegs;
            case "WEAPONS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateWep = getNewItem(
                    id,
                    state,
                    "WEAPONS",
                    props.includePreviouslyRolled.weapons
                );
                return newStateWep;
            case "ASHES":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateAsh = getNewItem(
                    id,
                    state,
                    "ASHES",
                    props.includePreviouslyRolled.ashes
                );
                return newStateAsh;
            case "INCANTS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateInc = getNewItem(
                    id,
                    state,
                    "INCANTS",
                    props.includePreviouslyRolled.incantations
                );
                return newStateInc;
            case "SORCS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateSorc = getNewItem(
                    id,
                    state,
                    "SORCS",
                    props.includePreviouslyRolled.sorceries
                );
                return newStateSorc;
            case "SPIRITS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateSpirits = getNewItem(
                    id,
                    state,
                    "SPIRITS",
                    props.includePreviouslyRolled.spirits
                );
                return newStateSpirits;
            case "TALIS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateTalis = getNewItem(
                    id,
                    state,
                    "TALIS",
                    props.includePreviouslyRolled.talismans
                );
                return newStateTalis;

            case "SHIELDS":
                if (!id) {
                    console.log("Please provide an id.");
                }
                const newStateShield = getNewItem(
                    id,
                    state,
                    "SHIELDS",
                    props.includePreviouslyRolled.shields
                );
                return newStateShield;
            default:
                console.log("No changes were made.");
                return state;
        }
    };
    // End reducer

    function generateNewBuild() {
        buildDispatch({ type: "FULLBUILD" });
    }

    const [build, buildDispatch] = React.useReducer(buildReducer, props.initialBuild);

    return (
        <>
            <div className="layout-wrapper-sm">
                <Box sx={{ height: "80vh", maxHeight: "150vh", width: "84vw" }}>
                    <Box sx={{ width: 1 / 1, flex: 1 }}>
                        <div className="top-grid-container">
                            <Grid container spacing={0} direction="row" padding={0} columns={8}>
                                <Grid item xs={8} sx={{ p: 0 }}>
                                    <div className="form-container">
                                        <Button
                                            className="button-sm"
                                            onClick={generateNewBuild}
                                            sx={{
                                                color: "#ef8b09",
                                                border: "1px solid rgba(0, 0, 0, 0.2)",
                                                boxShadow: 1,
                                            }}
                                        >
                                            GENERATE NEW BUILD
                                        </Button>
                                        <StartingClass
                                            starting_class={build["starting_class"]}
                                            size={props.size}
                                        />
                                        <SelectMenu
                                            buildNums={props.buildNums}
                                            buildNumsDispatch={props.buildNumsDispatch}
                                        />
                                    </div>
                                </Grid>
                            </Grid>
                        </div>
                    </Box>
                    <Box sx={{ width: 1.0 / 1, m: "auto", flex: 1 }}>
                        <div className="bottom-div-container" style={{ marginTop: "20px" }}>
                            <Grid container direction="row" columns={8} spacing={6}>
                                <Grid item xs={1}>
                                    <div className="armor-container">
                                        <Armors
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="weapons-container">
                                        <Weapons
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="sorcs-container">
                                        <Sorceries
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="incants-container">
                                        <Incantations
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="ashes-container">
                                        <Ashes
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="talis-container">
                                        <Talismans
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="spirits-container">
                                        <Spirits
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                                <Grid item xs={1}>
                                    <div className="shield-container">
                                        <Shield
                                            build={build}
                                            color={props.color}
                                            size={props.size}
                                            buildDispatch={props.buildDispatch}
                                        />
                                    </div>
                                </Grid>
                            </Grid>
                        </div>
                    </Box>
                </Box>
            </div>
            {/* <DevMessage /> */}
        </>
    );
}

export default SmallLayout;
