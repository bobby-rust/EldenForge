import React from 'react'
import './App.css'
import './styles/header.css'
import generateRandomBuild from './functions/generateRandomBuild'
import AnalyticsWrapper from './components/AnalyticsWrapper'
import SmallLayout from './layouts/SmallLayout'
import DevMessage from './components/DevMessage'
import Header from './components/Header'
import 'bootstrap/dist/css/bootstrap.min.css'

// Type definitions
enum buildNumsDispatchActionTypes {
    WEAPONS = "WEAPONS",
    ASHES = "ASHES",
    INCANTS = "INCANTS",
    SORCS = "SORCS",
    SPIRITS = "SPIRITS",
    TALIS = "TALIS",
    SHIELDS = "SHIELDS"
}

interface buildNumsAction {
    type: buildNumsDispatchActionTypes,
    payload: number
}

interface buildNumsState {
    weapons: number,
    ashes: number,
    incants: number,
    sorcs: number,
    spirits: number,
    talis: number,
    shields: number,
}
// End type definitions

function App() {
    /**
     * This object sets the number of each item to generate by default
     * To change the number of each item generated by default, simply change the values in this object
     */ 
    const initialBuild: buildNumsState = { 
        weapons: 2,
        ashes: 2,
        incants: 2,
        sorcs: 2,
        spirits: 2,
        talis: 2,
        shields: 1,
    }

    /**
     * Set up build items state
     * Pass the initialBuild numbers here because this is only called when initializing the state
     */
    const [build, setBuild] = React.useState(generateRandomBuild(initialBuild.weapons, initialBuild.ashes, initialBuild.incants, initialBuild.sorcs, initialBuild.spirits, initialBuild.talis))
    // End set up build items state
    
    /**
     * Generate new build
     * Pass the state of buildNums; this is the function called when the user generates a new build
     */
    function generateNewBuild() {
        setBuild(generateRandomBuild(buildNums.weapons, buildNums.ashes, buildNums.incants, buildNums.sorcs, buildNums.spirits, buildNums.talis))
    }
    // End generate new build

    // Reducer
    const reducer = (state: buildNumsState, action: buildNumsAction) => {
        /**
         * Reducer for the state of the number of each item type to generate
         * This function gets called every time the user changes the values of the select menu for any item type
         */

        const { type, payload } = action

        switch(type) {
            case "WEAPONS":
                return {...state, weapons: payload}
            case "ASHES": 
                return {...state, ashes: payload}
            case "INCANTS":
                return {...state, incants: payload}
            case "SORCS":
                return {...state, sorcs: payload}
            case "SPIRITS":
                return {...state, spirits: payload}
            case "TALIS": 
                return {...state, talis: payload}
            case "SHIELDS":
                return {...state, shields: payload}
            default:
                return state;
        }
    }
    // End reducer

    // Set up build numbers state
    const [buildNums, buildNumsDispatch] = React.useReducer(reducer, initialBuild);
    // End set up build numbers state

    // Set up media state
    const [mediaState, setMediaState] = React.useState({
        isLargeMedia: window.matchMedia('(min-width: 1200px)').matches,
    })
    const handler = (event: any) => setMediaState({ isLargeMedia: event.matches })
    window.matchMedia('(min-width: 1200px)').addEventListener('change', handler)
    // End set up media state

    // Set up layout state
    const [layout, setLayout] = React.useState({
        isLargeLayout: true,
        size: '',
    })
    // End set up layout state

    // Set up color button state
    const [colorButtonState, setColorButtonState] = React.useState(true)
    // End set up color button state

    // Set up layout button state
    const [layoutButtonState, setLayoutButtonState] = React.useState(true)
    // End set up layout button state

    // color Styling State
    const [darkMode, setDarkMode] = React.useState({
        isDarkMode: true,
        color: '',
    })
    // End color Styling State

    // Handle color change
    function handleColorChange() {
        setColorButtonState(!colorButtonState)

        if (darkMode.isDarkMode) {
            setDarkMode({ isDarkMode: false, color: '-lt' })
        } else if (!darkMode.isDarkMode) {
            setDarkMode({ isDarkMode: true, color: '' })
        }
    }
    // End handle color change

    // Handle layout change
    function handleLayoutChange() {
        setLayoutButtonState(!layoutButtonState)
        if (layout.isLargeLayout) {
            setLayout({ isLargeLayout: false, size: '-sm' })
        } else if (!layout.isLargeLayout) {
            setLayout({ isLargeLayout: true, size: '' })
        }
    }
    // End handle layout change

    // Handle mobile user
    if (!mediaState.isLargeMedia) {
        return <div className='mobile-message'>Mobile support coming soon.</div>
    }
    // End handle mobile user

    return (
        <div className='App'>
            <>
                <Header
                    color={darkMode.color}
                    handleColorChange={handleColorChange}
                    handleLayoutChange={handleLayoutChange}
                    layoutButtonState={layoutButtonState}
                    colorButtonState={colorButtonState}
                />

                {/* {layout.isLargeLayout && (
                <LargeLayout
                    color={darkMode.color}
                    build={build}
                    handleColorChange={handleColorChange}
                    handleLayoutChange={handleLayoutChange}
                    generateNewBuild={generateNewBuild}
                    size={layout.size}
                />
            )}

            {!layout.isLargeLayout && (
                <SmallLayout
                    color={darkMode.color}
                    build={build}
                    handleColorChange={handleColorChange}
                    handleLayoutChange={handleLayoutChange}
                    generateNewBuild={generateNewBuild}
                    size={layout.size}
                />
            )} */}
                <div className='App-sm'>
                    <SmallLayout
                        color={darkMode.color}
                        build={build}
                        handleColorChange={handleColorChange}
                        handleLayoutChange={handleLayoutChange}
                        generateNewBuild={generateNewBuild}
                        size={layout.size}
                        buildNums={buildNums}
                        buildNumsDispatch={buildNumsDispatch}
                    />
                    <DevMessage />
                </div>
                <AnalyticsWrapper />
            </>
        </div>
    )
}

export default App
